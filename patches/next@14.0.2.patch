diff --git a/dist/build/handle-externals.js b/dist/build/handle-externals.js
index 1c537a221a6d6ca25c21f8bf052a3d87041a6b8f..e8b93cb6a81e13762eb49c00181de5addc8a66f0 100644
--- a/dist/build/handle-externals.js
+++ b/dist/build/handle-externals.js
@@ -45,7 +45,7 @@ const nodeModulesRegex = /node_modules[/\\].*\.[mc]?js$/;
 function isResourceInPackages(resource, packageNames, packageDirMapping) {
     return packageNames == null ? void 0 : packageNames.some((p)=>packageDirMapping && packageDirMapping.has(p) ? resource.startsWith(packageDirMapping.get(p) + _path.default.sep) : resource.includes(_path.default.sep + _path.default.join("node_modules", p.replace(/\//g, _path.default.sep)) + _path.default.sep));
 }
-async function resolveExternal(dir, esmExternalsConfig, context, request, isEsmRequested, getResolve, isLocalCallback, baseResolveCheck = true, esmResolveOptions = _webpackconfig.NODE_ESM_RESOLVE_OPTIONS, nodeResolveOptions = _webpackconfig.NODE_RESOLVE_OPTIONS, baseEsmResolveOptions = _webpackconfig.NODE_BASE_ESM_RESOLVE_OPTIONS, baseResolveOptions = _webpackconfig.NODE_BASE_RESOLVE_OPTIONS) {
+async function resolveExternal(dir, esmExternalsConfig, context, request, isEsmRequested, hasAppDir, getResolve, isLocalCallback, baseResolveCheck = true, esmResolveOptions = _webpackconfig.NODE_ESM_RESOLVE_OPTIONS, nodeResolveOptions = _webpackconfig.NODE_RESOLVE_OPTIONS, baseEsmResolveOptions = _webpackconfig.NODE_BASE_ESM_RESOLVE_OPTIONS, baseResolveOptions = _webpackconfig.NODE_BASE_RESOLVE_OPTIONS) {
     const esmExternals = !!esmExternalsConfig;
     const looseEsmExternals = esmExternalsConfig === "loose";
     let res = null;
@@ -56,6 +56,13 @@ async function resolveExternal(dir, esmExternalsConfig, context, request, isEsmR
     ] : [
         false
     ];
+
+    // Disable esm resolving for app/ and pages/ so for esm package using under pages/
+    // won't load react through esm loader
+    if (hasAppDir) {
+        preferEsmOptions = [false]
+    }
+
     for (const preferEsm of preferEsmOptions){
         const resolve = getResolve(preferEsm ? esmResolveOptions : nodeResolveOptions);
         // Resolve the import with the webpack provided context, this
@@ -110,7 +117,7 @@ async function resolveExternal(dir, esmExternalsConfig, context, request, isEsmR
         isEsm
     };
 }
-function makeExternalHandler({ config, optOutBundlingPackageRegex, dir }) {
+function makeExternalHandler({ config, optOutBundlingPackageRegex, dir, hasAppDir }) {
     var _config_experimental;
     let resolvedExternalPackageDirs;
     const looseEsmExternals = ((_config_experimental = config.experimental) == null ? void 0 : _config_experimental.esmExternals) === "loose";
@@ -207,7 +214,7 @@ function makeExternalHandler({ config, optOutBundlingPackageRegex, dir }) {
             return resolveNextExternal(fullRequest);
         }
         // TODO-APP: Let's avoid this resolve call as much as possible, and eventually get rid of it.
-        const resolveResult = await resolveExternal(dir, config.experimental.esmExternals, context, request, isEsmRequested, getResolve, isLocal ? resolveNextExternal : undefined);
+        const resolveResult = await resolveExternal(dir, config.experimental.esmExternals, context, request, isEsmRequested, hasAppDir, getResolve, isLocal ? resolveNextExternal : undefined);
         if ("localRes" in resolveResult) {
             return resolveResult.localRes;
         }
@@ -243,7 +250,7 @@ function makeExternalHandler({ config, optOutBundlingPackageRegex, dir }) {
             resolvedExternalPackageDirs = new Map();
             // We need to resolve all the external package dirs initially.
             for (const pkg of config.transpilePackages){
-                const pkgRes = await resolveExternal(dir, config.experimental.esmExternals, context, pkg + "/package.json", isEsmRequested, getResolve, isLocal ? resolveNextExternal : undefined);
+                const pkgRes = await resolveExternal(dir, config.experimental.esmExternals, context, pkg + "/package.json", isEsmRequested, hasAppDir, getResolve, isLocal ? resolveNextExternal : undefined);
                 if (pkgRes.res) {
                     resolvedExternalPackageDirs.set(pkg, _path.default.dirname(pkgRes.res));
                 }
diff --git a/dist/build/webpack-config.js b/dist/build/webpack-config.js
index e732de8230a08180fb7a2631bb88190ad417a6c4..09042eb3cc7ed859cdcd93e09fd8ce310759c72b 100644
--- a/dist/build/webpack-config.js
+++ b/dist/build/webpack-config.js
@@ -590,7 +590,8 @@ async function getBaseWebpackConfig(dir, { buildId, config, compilerType, dev =
     const handleExternals = (0, _handleexternals.makeExternalHandler)({
         config,
         optOutBundlingPackageRegex,
-        dir
+        dir,
+        hasAppDir
     });
     const shouldIncludeExternalDirs = config.experimental.externalDir || !!config.transpilePackages;
     function createLoaderRuleExclude(skipNodeModules) {
